#include <iostream>
#include <stdlib.h>
#include <math.h>

using namespace std;
using std::cout;
using std::endl;

void lecturas(double* , double*, int*);
void regla_falsa(double , double, int);
double eval_funcion(double);
/****************************************************************************/
int main()
{
 double vxi=0.0, vxs=0.0;
 int vn;
 lecturas(&vxi , &vxs , &vn);
 regla_falsa(vxi , vxs, vn);
 
 return 0;
}
/******************************************************************************/

void lecturas(double *xi , double *xs, int *N)
{
 cout<<" - R E G L A   F A L S A - "<<endl;
 cout<<"Digite el extremo inferior (Xi) : "; cin>>*xi;
 cout<<"Digite el extremo superior (Xs) : "; cin>>*xs;
 cout<<"Digite el numero de iteraciones : "; cin>>*N;

 while(*xi>=*xs)
 {
  cout<<"El extremo inferior (xi) debe ser MENOR que el extremo (xs) "<<endl;
  cout<<"Digite el extremo inferior (Xi) : "; cin>>*xi;
  cout<<"Digite el extremo superior (Xs) : "; cin>>*xs;
 }

 while(*N<=2)
 {
  cout<<"La cantidad de iteraciones debe ser positiva (>2) "<<endl;
  cout<<"Digite el numero de iteraciones : "; cin>>*N;
 }
}
/****************************************************************************/

void regla_falsa(double xi , double xs, int N)
{
 double TOL=0.00000001,  xr=0.0, xra=0.0, fxi=0.0 , fxs=0.0, fxr=0.0 ;
 double validador=0.0, exr=0.0, er=0.0, A=0.0 , B=0.0, C=0.0, D=0.0;
 int i = 1;
 cout.precision(10);

 fxi=eval_funcion(xi);    fxs=eval_funcion(xs);
 A = xi - xs;     B = fxs * A;     C = fxi - fxs;     D = B/C;
 xr = xs - D;   cout<<"\n XR : "<<xr;    fxr = eval_funcion(xr);
 
 cout<<"\n"<<"n"<<"\t"<<"Raiz"<<"\t\t\t"<<"f(Raiz)"<<"\t\t\t"<<"Er";

 while(i <= N)
 {
  xra = xr;
  validador = fxi * fxr;

  if(validador < 0) {   xs=xr;    }
  else              {   xi=xr;    }  //todo esto para reajustar el intervalo

  fxi=eval_funcion(xi);    fxs=eval_funcion(xs);
  A = xi - xs;     B = fxs * A;     C = fxi - fxs;     D = B/C;     xr = xs - D;
  fxr=eval_funcion(xr);

  //Calculo del error relativo
  exr = xr - xra;  er = exr/xr; if(er<0){er=er*(-1);}

  //presentacion de resultados iteracion a iteracion 
  cout<<"\n"<<i<<"\t";
  std::cout.setf( std::ios::fixed, std:: ios::floatfield );
  std::cout << xr;
  std::cout.unsetf( std::ios::floatfield );
  std::cout.precision(10);
  std::cout<<"\t\t"; std::cout << fxr;
  std::cout<<"\t\t"; std::cout << er;

  //si se tiene exito:
  if((fxr==0)||(er<TOL))
  {cout<<"\nProcedimiento completado satisfactoriamente\n"; system("pause"); exit(1);}

  i++;
 }
 if((i>N)&&(er>TOL)) {cout<<"\nEl metodo fracaso despues de "<<N<<" iteraciones";}
 cout<<"\n"; system("pause");
}
/****************************************************************************/
//h = 0.5 (sen (((2 π x)/ (16))) cos (((2 π*12*48)/ (16))) +ℯ^ (-x))

//Entradas a probar para Raiz: a = 7 , b = 11
double eval_funcion(double v)
{
    double r=0.0; 
    double a = 0.0;
    double b = 0.0;
    double e = 0.0;
    a = sin((2*3,141592653*v)/16); //sen ((2 π x)/ λ)
    b = cos((2*3,141592653*12*48)/16); //cos ((2π t v)/ λ)
    e = pow(2.718281828,-1*v);  //ℯ^ (-x)
    r = 0.5*(a*b+e);
    return r;
}

