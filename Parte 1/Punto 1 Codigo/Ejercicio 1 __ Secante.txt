#include <iostream>
#include <stdlib.h>
#include <math.h>

using namespace std;
using std::cout;
using std::endl;

void lecturas(double* , double* , int*);
void secante(double , double , int);
double eval_funcion(double);
/*******************************************************************************/
int main()
{
 double vx0, vx1;
 int vn;
 lecturas(&vx0 , &vx1 , &vn);
 secante(vx0 , vx1, vn);

 return 0;
}
/*******************************************************************************/

void lecturas(double *x0 ,  double *x1 , int *N)
{
 cout<<" - S E C A N T E - "<<endl;
 cout<<"Digite Xo : "; cin>>*x0;
 cout<<"Digite X1 : "; cin>>*x1;
 cout<<"Digite el numero de iteraciones : "; cin>>*N;

 while(*N<=2)
 {
  cout<<"La cantidad de iteraciones debe ser positiva (>2) "<<endl;
  cout<<"Digite el numero de iteraciones : "; cin>>*N;
 }
}
/*******************************************************************************/

void secante(double x0 , double x1 , int N)
{
 double TOL=0.000000001,  xr=0.0, xra=0.0, fx0=0.0 , fx1=0.0, fxr=0.0 ;
 double exr=0.0, er=0.0, A=0.0 , B=0.0, C=0.0, D=0.0;
 int i = 1;
 cout.precision(10);

 fx0=eval_funcion(x0);    fx1=eval_funcion(x1);
 A = x0 - x1;     B = fx1 * A;     C = fx0 - fx1;     D = B/C;   xr = x1 - D;
 cout<<"\n XR : "<<xr;    fxr = eval_funcion(xr);
 cout<<"\n"<<"n"<<"\t"<<"Raiz"<<"\t\t\t"<<"f(raiz)"<<"\t\t\t"<<"Er";

 while(i <= N)
 {
   xra = xr;
   x0 = x1;   x1 = xr;  //reajuste
   fx0=eval_funcion(x0);    fx1=eval_funcion(x1);
   A = x0 - x1;     B = fx1 * A;     C = fx0 - fx1;     D = B/C;     xr = x1 - D;
   fxr=eval_funcion(xr);

  //Calculo del error relativo
  exr = xr - xra;  er = exr/xr; if(er<0){er=er*(-1);}

  //presentacion de resultados iteracion a iteracion 
  cout<<"\n"<<i<<"\t";
  std::cout.setf( std::ios::fixed, std:: ios::floatfield );
  std::cout << xr<<"\t";
  std::cout.unsetf( std::ios::floatfield );
  std::cout.precision(10);
  std::cout<<"\t\t"; std::cout << fxr;
  std::cout<<"\t\t"; std::cout << er;
  
  //si se tiene exito:
  if((fxr==0)||(er<TOL))
  {cout<<"\nProcedimiento completado satisfactoriamente\n"; system("pause"); exit(1);}

  i++;
 }

 if((i>N)&&(er>TOL)) {cout<<"\nEl metodo fracaso despues de "<<N<<" iteraciones";}
 cout<<"\n"; system("pause");
}
/*******************************************************************************/
//h = 0.5 (sen (((2 π x)/ (16))) cos (((2 π*12*48)/ (16))) +ℯ^ (-x))

//Entradas a probar para Raiz: a = 7 , b = 8
double eval_funcion(double v)
{
    double r=0.0; 
    double a = 0.0;
    double b = 0.0;
    double e = 0.0;
    a = sin((2*3,141592653*v)/16); //sen ((2 π x)/ λ)
    b = cos((2*3,141592653*12*48)/16); //cos ((2π t v)/ λ)
    e = pow(2.718281828,-1*v);  //ℯ^ (-x)
    r = 0.5*(a*b+e);
    return r;
}