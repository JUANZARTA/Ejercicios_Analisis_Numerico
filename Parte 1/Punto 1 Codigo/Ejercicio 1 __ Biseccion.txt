#include <iostream>
#include <sstream>
#include <stdlib.h>
#include <math.h>

using namespace std;
using std::cout;
using std::endl;

void lecturas(double* , double*, int*);
void biseccion(double , double, int);
double eval_funcion(double);
/****************************************************************************/
int main()
{
   double va, vb;
   int vn;
   lecturas(&va , &vb , &vn);
   biseccion(va , vb, vn);
   
   return 0;
}
/******************************************************************************/
void lecturas(double *a , double *b, int *N)
{
   cout<<" - B I S E C C I O N - "<<endl;
   cout<<"Digite el extremo inferior (a) : "; cin>>*a;
   cout<<"Digite el extremo superior (b) : "; cin>>*b;
   cout<<"Digite el numero de iteraciones : "; cin>>*N;
   
   while(*a>=*b)
   {
      cout<<"El extremo inferior (a) debe ser MENOR que el extremo (b) "<<endl;
      cout<<"Digite el extremo inferior (a) : "; cin>>*a;
      cout<<"Digite el extremo superior (b) : "; cin>>*b;
   }
   
   while(*N<=2)
   {
      cout<<"La cantidad de iteraciones debe ser positiva (>2) "<<endl;
      cout<<"Digite el numero de iteraciones : "; cin>>*N;
   }
}
/****************************************************************************/
void biseccion(double a , double b, int N)
{
   double TOL=0.000000001;
   int i = 1;
   double aux1=0.0;
   double  efa=0.0, efp = 0.0, er=0.0, Xanterior, Xnueva;
   cout.precision(10);
  
   //El Paso 1 fue inicializar i en 1.
   cout<<"\n"<<"n"<<"\t"<<"Raiz"<<"\t\t\t"<<"f(Raiz)"<<"\t\t\t"<<"Er";
   
   //Paso 2: calculo del primer punto medio y evaluacion
   Xanterior = (a + b)/2;
   efa = eval_funcion(a);
   efp = eval_funcion(Xanterior);
   aux1 = efa * efp;
   if(aux1>0){a = Xanterior;}  else {b = Xanterior;}
   
   //Paso 3:
   while(i <= N)
   {
      //Paso 4: Calculo y evaluacion de nueva raiz y calculo del error relativo
      Xnueva = (a + b)/2;    efp = eval_funcion(Xnueva);
      er = (Xnueva - Xanterior)/Xnueva;  if(er<0){er=er*(-1);}
      
      //Paso 5: Mostrar raiz aproximada si ha terminado
      if((efp==0)||(er<TOL))
      {
         cout<<"\n"<<i+1<<"\t";
         std::cout.setf( std::ios::fixed, std:: ios::floatfield );
         std::cout << Xnueva;
         std::cout.unsetf( std::ios::floatfield );
         std::cout.precision(10);
         std::cout<<"\t\t"; std::cout << efp;
         std::cout<<"\t\t"; std::cout << er;
         cout<<"\n"; system("pause"); exit(1);
      }
      
      //Paso 6: actualizar contador de iteraciones
      i = i + 1;
      
      //Adicional: Para mostrar resultados iteracion a iteracion
      //cuando aun debe seguir iterando
      cout<<"\n"<<i<<"\t";
      std::cout.setf( std::ios::fixed, std:: ios::floatfield );
      std::cout << Xnueva;
      std::cout.unsetf( std::ios::floatfield );
      std::cout.precision(10);
      std::cout<<"\t\t"; std::cout << efp;
      std::cout<<"\t\t"; std::cout << er;
      
      
      //Paso 7:  re-definicion del intervalo y actualizacion de raiz
      efa = eval_funcion(a);
      aux1 = efa*efp;   //f(a)*f(Xnueva)
      if(aux1>0){a = Xnueva; }   else {b = Xnueva;}
      Xanterior = Xnueva; //Actualizacion de raiz
   }
   
   //el "paso 8"
   if((i>N)&&(er>TOL)) {cout<<"\nEl metodo ha fracasado despues de "<<N<<" iteraciones";}
   
   cout<<"\n";  system("pause");
}
/****************************************************************************/

//h = 0.5 (sen (((2 π x)/ (16))) cos (((2 π*12*48)/ (16))) +ℯ^ (-x))

//Entradas a probar para Raiz: a = 7 , b = 8
double eval_funcion(double v)
{
    double r=0.0; 
    double a = 0.0;
    double b = 0.0;
    double e = 0.0;
    a = sin((2*3,141592653*v)/16); //sen ((2 π x)/ λ)
    b = cos((2*3,141592653*12*48)/16); //cos ((2π t v)/ λ)
    e = pow(2.718281828,-1*v);  //ℯ^ (-x)
    r = 0.5*(a*b+e);
    return r;
}