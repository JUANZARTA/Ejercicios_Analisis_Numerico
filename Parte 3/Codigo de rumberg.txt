#include <iostream>
#include <stdlib.h>
#include <math.h>
#define LIM 5

using namespace std;
using std::cout;
using std::endl;

void romberg();
void trapecio_modificado(double *);
void tabla_funcion (double * , double *, double, double , double);
void leer_limites(double * , double *);
double mapeo_funcion(double);

/*****************************************************************/

int main()
{
   cout<<"R O M B E R G\n";
   romberg();
   cout<<"\n";  system("pause");
   return 0;
}
/*****************************************************************/

void romberg()
{  
   int i , j, f, c, lim=5;
   double VR[LIM] = {0};
   double M[LIM][LIM] = {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}};
   double c1 = 0.0, c2 = 0.0;
   double integral = 0.0, Ea = 0.0;
   f = lim;
   c = lim; 

   trapecio_modificado(VR);
   
   for(i=0; i<f; i++) {  M[i][0]= VR[i];  }

   for(j=1; j<c; j++)
   {
     if(j==1){c1 = 1.3333333333; c2 = 0.3333333333; }
     if(j==2){c1 = 1.0666666666; c2 = 0.0666666666; }
     if(j==3){c1 = 1.0158730159; c2 = 0.0158730159;  }
     if(j==4){c1 = 1.0039215686; c2 = 0.0039215686;  }

     for(i=0; i<f-1; i++) { M[i][j] = (c1 * M[i+1][j-1]) - (c2 * M[i][j-1]); }
     f--;
   }
   
   integral = M[0][lim-1];
   
   /*
   M[0][1] = (1.333333333 * M[1][0]) - (0.333333333 * M[0][0]);
   M[1][1] = (1.333333333 * M[2][0]) - (0.333333333 * M[1][0]);
   M[2][1] = (1.333333333 * M[3][0]) - (0.333333333 * M[2][0]);
   M[3][1] = (1.333333333 * M[4][0]) - (0.333333333 * M[3][0]);

   M[0][2] = (1.066666666 * M[1][1]) - (0.066666666 * M[0][1]);
   M[1][2] = (1.066666666 * M[2][1]) - (0.066666666 * M[1][1]);
   M[2][2] = (1.066666666 * M[3][1]) - (0.066666666 * M[2][1]);

   M[0][3] = (1.015873015 * M[1][2]) - (0.015873015 * M[0][2]);
   M[1][3] = (1.015873015 * M[1][2]) - (0.015873015 * M[1][2]);

   M[0][4] = (1.003921568 * M[1][3]) - (0.003921568 * M[0][3]);
   */

   f = lim;
   c = lim;
   for(i=0; i<f; i++)
   {
     cout<<"\n";
     for(j=0; j<c; j++)
     {
       cout<<"I("<<i+1<<","<<j+1<<"): "<<M[i][j]<<"\t";
     }
    c--;
   }

   cout<<"\n\nLa aproximacion de la integral es: "<<integral;
   Ea = ((M[0][4] - M[0][3])/M[0][4]) * 100; 
   if(Ea<0) Ea = Ea * (-1);
   cout<<"\nEl error de aproximacion (Ea) es: "<<Ea<<" %";
}
/*****************************************************************/

void trapecio_modificado(double *VR)
{
  double X[17] = {0};
  double Y[17] = {0};
   
  double a=0.0 , b=0.0, suma_Y = 0.0, integral = 0.0; 
  int i , k , N = 0;
  cout.precision(10);
  leer_limites(&a, &b); cout<<"Limites leidos. a = "<<a<<" , b = "<<b<<endl;
   
  for(k=1; k<=LIM; k++)
  {
    N = pow(2 , (k-1));
    tabla_funcion(X, Y, N, a, b);   
      
    if(k==1)
    {
      suma_Y = Y[0] + Y[1];
      integral = ((b - a)/(2*N)) * suma_Y;
      VR[k-1] = integral;
    }
    else
    {
      for(i=1; i<N; i++)  {   suma_Y = suma_Y + Y[i];  }
      suma_Y = 2*suma_Y;
      suma_Y = suma_Y + Y[0] + Y[N];
      integral = ((b - a)/(2*N)) * suma_Y;
      VR[k-1] = integral;
    }
    suma_Y = 0.0; 
    integral = 0.0; 
  }
}
/*****************************************************************/

void leer_limites(double *a , double *b)
{
  //Ejemplo 1: a = 0.0;    b = 1.0;
  //Ejemplo 2: a = 0.0;    b = 1.04719755119;
  //Ejemplo 3: a = 0.0;    b = 0.8;
  //Ejemplo 4: a = 0.0;    b = 3.14159265359;
  //Ejemplo 5: a = 1.0;    b = 2.71828182846;
  cout<<"Limite Inferior (a) : "; cin>>*a;
  cout<<"Limite Superior (b) : "; cin>>*b;
  while(*a>=*b)
  {
   cout<<"\nEl limite inferior (a) debe ser MENOR que el limite superior (b)";
   cout<<"\nLimite Inferior (a) : "; cin>>*a;
   cout<<"Limite Superior (b) : "; cin>>*b;
  }
}
/*****************************************************************/

void tabla_funcion (double *X, double *Y, double N, double A, double B)
{
  double h = 0.0, resultado = 0.0;
  int i;

  h = (B - A) / N;

  X[0] = A;  
  resultado = mapeo_funcion(X[0]);   
  Y[0] = resultado;   

  for(i=1; i<=N; i++)
  {
   X[i] = X[i-1] + h;
   resultado = mapeo_funcion(X[i]);
   Y[i] = resultado;
  }
}
/*****************************************************************/

//F(x)
/*
double mapeo_funcion(double X)
{
double aux = 0.0 , aux2 = 0.0, valor = 0.0; 
 aux2 = 2.5*pow(X,3);
 aux = pow(2.71828182846,X/2);
 valor = aux2/aux;
 return valor;
}
*/
// G(x)
/*
double mapeo_funcion(double X)
{
double aux = 0.0 , valor = 0.0; 
 valor = sin(X);
 return valor;
}
*/
//F(x)-G(x)

double mapeo_funcion(double X)
{
double aux = 0.0 , aux2 = 0.0, valor = 0.0; 
 aux2 = 2.5*pow(X,3);
 aux = pow(2.71828182846,X/2);
 valor = aux2/aux-sin(X);
 return valor;
}